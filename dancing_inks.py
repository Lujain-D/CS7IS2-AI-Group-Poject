import numpy as np
import time


class CellObj(object):

    def __init__(self, C, ID):
        self.right = self
        self.left = self
        self.up = self
        self.down = self
        self.column = C
        self.ID = ID


class ColumnObject(object):

    def __init__(self, ide):
        CellObj.__init__(self, self, ide)
        self.count = 0


class DancingLinks(object):

    def __init__(self, grid):
        self.solution = []
        self.grid = grid
        self.h = None

    @staticmethod
    def link_row_to_column(row_element):
        top = row_element.column
        row_element.column.count += 1
        row_element.down = top
        row_element.up = top.up
        top.up.down = row_element
        top.up = row_element

    def create_rows(self, i, j, k, columnList):
        rowNumber = i * 81 + j * 9 + k
        
        
        pos = CellObj(columnList[i * 9 + j], rowNumber)
        row = CellObj(columnList[81 + i * 9 + k], rowNumber)
        col = CellObj(columnList[162 + j * 9 + k], rowNumber)
        box = CellObj(columnList[243 + (3 * (i // 3) + (j // 3)) * 9 + k], rowNumber)

        pos.right = row
        row.right = col
        col.right = box
        box.right = pos
        pos.left = box
        box.left = col
        col.left = row
        row.left = pos

        self.link_row_to_column(pos)
        self.link_row_to_column(row)
        self.link_row_to_column(col)
        self.link_row_to_column(box)

    def generate_links(self):

        h = ColumnObject('h')
        self.h = h
        columnList = list()

        for column in range(0, 324):  # 324/9/9 = 4  -> 324 constraints
            c = ColumnObject(column)
            c.right = h
            c.left = h.left
            h.left.right = c
            h.left = c
            columnList.append(c)

        for i in range(self.grid.shape[0]):
            for j in range(self.grid.shape[1]):
                if self.grid[i][j] == 0:
                    for k in range(0, 9):
                        self.create_rows(i, j, k, columnList)
                else:
                    self.create_rows(i, j, self.grid[i][j] - 1, columnList)

    # This will choose the column with the least number of elements in it.
    def getColumnithLeastCells(self):
        c = self.h.right
        currentCount = 1000
        while c != self.h:
            if c.count < currentCount:
                selectedColumn = c
                currentCount = c.count
            c = c.right
        return selectedColumn

    # This unlinks the element from the appropriate row and column.
    def cover(self, column):
        column.left.right = column.right
        column.right.left = column.left

        row = column.down

        while row != column:
            j = row.right
            while j != row:
                j.up.down = j.down
                j.down.up = j.up
                j.column.count -= 1
                j = j.right
            row = row.down

    # This links the element to the aprropriate row and column.
    def uncover(self, column):
        row = column.up
        while row != column:
            j = row.left
            while j != row:
                j.down.up = j
                j.up.down = j
                j.column.count += 1
                j = j.left
            row = row.up

        column.right.left = column
        column.left.right = column

    def search(self):
        global steps
        global resultFound
        steps = steps + 1

        if resultFound:
            return

        if self.h == self.h.right:
            resultFound = True
            # grid = self.build_solution()
            # print(grid)

        else:
            c = self.getColumnithLeastCells()
            self.cover(c)
            r = c.down
            while r != c:
                self.solution.append(r)
                current_right_element = r.right
                while current_right_element != r:
                    self.cover(current_right_element.column)
                    current_right_element = current_right_element.right
                self.search()

                r = self.solution.pop()
                c = r.column
                current_left_element = r.left
                while current_left_element != r:
                    self.uncover(current_left_element.column)
                    current_left_element = current_left_element.left
                r = r.down
            self.uncover(c)
            return

    def solve(self):
        # print('=======================')
        # print('Dancing Link Algorithm')
        # print('=======================')
        global resultFound
        resultFound = False
        if self.h != self.h.right:
            return self.search()

    def build_solution(self):
        rows = []
        for r in self.solution:
            rows.append(r.ID)
        rows.sort()
        grid = []
        for n in rows:
            grid.append(n % 9 + 1)

        return np.array(grid).reshape(9, 9)



medium = ["200000060000075030048090100000300000300010009000008000001020570080730000090000004",
          "807000003602080000000200900040005001000798000200100070004003000000040108300000506",
          "008009320000080040900500007000040090000708000060020000600001008050030000072900100",
          "600108000009070003005000080310005800000000000007600042090000400400030100000207006",
          "030010060020004000100003500300090000860000041000070008005900002000100090040080050",
          "001093000000100004020060370700000005080504060400000008092080010100009000000340600",
          "040390100005002000100800006003500900000000000006008300700004009000700400009056080",
          "800020070000500009340700000070000400005301700001000030000004067100006000020050008",
          "000090200504008006000000005002007010000605000030800900100000000400300709008040000",
          "000050060102400000350007004004000050000209000090000100500800013000006408030090000",
          "900340000001000000030000850020501600050000010004903080082000030000000900000072005",
          "600002090050004030000008001506000000910000084000000905200700000060300040070500002",
          "300004800010000200600009000000081700020000080003560000000100004004000030008700009",
          "500000070009500000070039100080070010002090600040010030008250040000006800020000005",
          "000030900000900008570004000300076040004000100020490007000500063100007000008060000",
          "500000000040150090000209006207000030600010004050000801800403000030085020000000003",
          "504000000100300000000006480006002007900107006400600900057800000000001009000000603",
          "002000079008130000000000840200017000070000030000590002069000000000063100520000400",
          "040000020605200000000450900010009400400708005002100080007036000000002301080000060",
          "000307060070900000102000007004006205006000700507200900700000804000001030030509000",
          "003002070800003050096000300000078600000409000004610000001000780080900003020300400",
          "100008003000000260003000540010857009000000000500213080062000400071000000300400007",
          "500032000000001890000006400000000026009000700480000000007500000041200000000960003",
          "030074000602003000107000000805060002020000090700020501000000607000200905000510030",
          "030060900290000000000000710000100480000206000069003000084000000000000035007090020",
          "080006902010000050900050003000000007005801200300000000600090004030000070407600080",
          "600008300000000857043000000700010400000723000001040006000000120526000000008300004",
          "000090005100800000038007040009008000756000823000200600040500790000001008600020000",
          "100000000009580040025600000090070080008000500010040070000008630070034200000000009",
          "006005700070000002000608004000050030001807900080060000400901000100000060008700300",
          "000000306030068000090040010350020100000804000004090067070030090000510070506000000",
          "090002030050040006000000074000080200010000050004070000930000000800030060020900010",
          "000005304500020001006040007000009270080000090079100000800030600700050002304600000",
          "000502700000600001004000200000008046600000009190700000007000500400009000003801000",
          "009080000060270009000000501006800007000764000400009200103000000200048060000050800",
          "000306000025000300901000020200000080000814000070000009060000103004000760000407000",
          "100900074000004020000080056030000700000635000002000090590060000020100000460002001",
          "000000003000001700650000048020009670000050000078300020790000061004500000200000000",
          "000000042900040010030005008020370500000020000005091060100700030080010007690000000",
          "105070000000100204900000070060007000004201600000600030090000001607008000000090803",
          "000000070034100000700060405502008700000020000008900506301040007000009860020000000",
          "060000008000100907050030004007051006000000000600490200900040080104003000200000030",
          "090060000100000806003200007000800019005000200270001000500004700704000003000050060",
          "009200050380017000000000060400020980000000000038040007040000000000980036020005100",
          "280001900000000070000060012032008007000040000400500820320070000010000000008900054",
          "100000007500643000009000000010000008406205309300000070000000200000381004900000005",
          "010020000060004800004609030000100600050000090002003000030506100009800050000070040",
          "096800000700050060800041000020000700500000001008000090000160009040090006000007230",
          "680507000000000200000021800030060105000000000906040080001290000009000000000803097",
          "600000300205080700090007000400000001000561000900000002000200050008010604003000009"]

hard = ["4.....8.5.3..........7......2.....6.....8.4......1.......6.3.7.5..2.....1.4......", "52...6.........7.13...........4..8..6......5...........418.........3..2...87.....", "6.....8.3.4.7.................5.4.7.3..2.....1.6.......2.....5.....8.6......1....", "48.3............71.2.......7.5....6....2..8.............1.76...3.....4......5....", "....14....3....2...7..........9...3.6.1.............8.2.....1.4....5.6.....7.8...", "......52..8.4......3...9...5.1...6..2..7........3.....6...1..........7.4.......3.", "6.2.5.........3.4..........43...8....1....2........7..5..27...........81...6.....", ".524.........7.1..............8.2...3.....6...9.5.....1.6.3...........897........", "6.2.5.........4.3..........43...8....1....2........7..5..27...........81...6.....", ".923.........8.1...........1.7.4...........658.........6.5.2...4.....7.....9.....", "6..3.2....5.....1..........7.26............543.........8.15........4.2........7..", ".6.5.1.9.1...9..539....7....4.8...7.......5.8.817.5.3.....5.2............76..8...", "..5...987.4..5...1..7......2...48....9.1.....6..2.....3..6..2.......9.7.......5..", "3.6.7...........518.........1.4.5...7.....6.....2......2.....4.....8.3.....5.....", "1.....3.8.7.4..............2.3.1...........958.........5.6...7.....8.2...4.......", "6..3.2....4.....1..........7.26............543.........8.15........4.2........7..", "....3..9....2....1.5.9..............1.2.8.4.6.8.5...2..75......4.1..6..3.....4.6.", "45.....3....8.1....9...........5..9.2..7.....8.........1..4..........7.2...6..8..", ".237....68...6.59.9.....7......4.97.3.7.96..2.........5..47.........2....8.......", "..84...3....3.....9....157479...8........7..514.....2...9.6...2.5....4......9..56", ".98.1....2......6.............3.2.5..84.........6.........4.8.93..5...........1..", "..247..58..............1.4.....2...9528.9.4....9...1.........3.3....75..685..2...", "4.....8.5.3..........7......2.....6.....5.4......1.......6.3.7.5..2.....1.9......", ".2.3......63.....58.......15....9.3....7........1....8.879..26......6.7...6..7..4", "1.....7.9.4...72..8.........7..1..6.3.......5.6..4..2.........8..53...7.7.2....46", "4.....3.....8.2......7........1...8734.......6........5...6........1.4...82......", ".......71.2.8........4.3...7...6..5....2..3..9........6...7.....8....4......5....", "6..3.2....4.....8..........7.26............543.........8.15........8.2........7..", ".47.8...1............6..7..6....357......5....1..6....28..4.....9.1...4.....2.69.", "......8.17..2........5.6......7...5..1....3...8.......5......2..4..8....6...3....", "38.6.......9.......2..3.51......5....3..1..6....4......17.5..8.......9.......7.32", "...5...........5.697.....2...48.2...25.1...3..8..3.........4.7..13.5..9..2...31..", ".2.......3.5.62..9.68...3...5..........64.8.2..47..9....3.....1.....6...17.43....", ".8..4....3......1........2...5...4.69..1..8..2...........3.9....6....5.....2.....", "..8.9.1...6.5...2......6....3.1.7.5.........9..4...3...5....2...7...3.8.2..7....4", "4.....5.8.3..........7......2.....6.....5.8......1.......6.3.7.5..2.....1.8......", "1.....3.8.6.4..............2.3.1...........958.........5.6...7.....8.2...4.......", "1....6.8..64..........4...7....9.6...7.4..5..5...7.1...5....32.3....8...4........", "249.6...3.3....2..8.......5.....6......2......1..4.82..9.5..7....4.....1.7...3...", "...8....9.873...4.6..7.......85..97...........43..75.......3....3...145.4....2..1", "...5.1....9....8...6.......4.1..........7..9........3.8.....1.5...2..4.....36....", "......8.16..2........7.5......6...2..1....3...8.......2......7..3..8....5...4....", ".476...5.8.3.....2.....9......8.5..6...1.....6.24......78...51...6....4..9...4..7", ".....7.95.....1...86..2.....2..73..85......6...3..49..3.5...41724................", ".4.5.....8...9..3..76.2.....146..........9..7.....36....1..4.5..6......3..71..2..", ".834.........7..5...........4.1.8..........27...3.....2.6.5....5.....8........1..", "..9.....3.....9...7.....5.6..65..4.....3......28......3..75.6..6...........12.3.8", ".26.39......6....19.....7.......4..9.5....2....85.....3..2..9..4....762.........4", "2.3.8....8..7...........1...6.5.7...4......3....1............82.5....6...1.......", "6..3.2....1.....5..........7.26............843.........8.15........8.2........7.."]

easy = ["..3.2.6..9..3.5..1..18.64....81.29..7.......8..67.82....26.95..8..2.3..9..5.1.3..",
"2...8.3...6..7..84.3.5..2.9...1.54.8.........4.27.6...3.1..7.4.72..4..6...4.1...3",
"......9.7...42.18....7.5.261..9.4....5.....4....5.7..992.1.8....34.59...5.7......",
".3..5..4...8.1.5..46.....12.7.5.2.8....6.3....4.1.9.3.25.....98..1.2.6...8..6..2.",
".2.81.74.7....31...9...28.5..9.4..874..2.8..316..3.2..3.27...6...56....8.76.51.9.",
"1..92....524.1...........7..5...81.2.........4.27...9..6...........3.945....71..6",
".43.8.25.6.............1.949....4.7....6.8....1.2....382.5.............5.34.9.71.",
"48...69.2..2..8..19..37..6.84..1.2....37.41....1.6..49.2..85..77..9..6..6.92...18",
"...9....2.5.1234...3....16.9.8.......7.....9.......2.5.91....5...7439.2.4....7...",
"..19....39..7..16..3...5..7.5......9..43.26..2......7.6..1...3..42..7..65....68..",
"...1254....84.....42.8......3.....95.6.9.2.1.51.....6......3.49.....72....1298...",
".6234.75.1....56..57.....4.....948..4.......6..583.....3.....91..64....7.59.8326.",
"3..........5..9...2..5.4....2....7..16.....587.431.6.....89.1......67.8......5437",
"63..........5....8..5674.......2......34.1.2.......345.....7..4.8.3..9.29471...8.",
"....2..4...8.35.......7.6.2.31.4697.2...........5.12.3.49...73........1.8....4...",
"361.259...8.96..1.4......57..8...471...6.3...259...8..74......5.2..18.6...547.329",
".5.8.7.2.6...1..9.7.254...6.7..2.3.15.4...9.81.3.8..7.9...762.5.6..9...3.8.1.3.4.",
".8...5........3457....7.8.9.6.4..9.3..7.1.5..4.8..7.2.9.1.2....8423........1...8.",
"..35.29......4....1.6...3.59..251..8.7.4.8.3.8..763..13.8...1.4....2......51.48..",
"...........98.51...519.742.29.4.1.65.........14.5.8.93.267.958...51.36...........",
".2..3..9....9.7...9..2.8..5..48.65..6.7...2.8..31.29..8..6.5..7...3.9....3..2..5.",
"..5.....6.7...9.2....5..1.78.415.......8.3.......928.59.7..6....3.4...1.2.....6..",
".4.....5...19436....9...3..6...5...21.3...5.68...2...7..5...2....24367...3.....4.",
"..4..........3...239.7...8.4....9..12.98.13.76..2....8.1...8.539...4..........8..",
"36..2..89...361............8.3...6.24..6.3..76.7...1.8............418...97..3..14",
"5..4...6...9...8..64..2.........1..82.8...5.17..5.........9..84..3...6...6...3..2",
"..72564..4.......5.1..3..6....5.8.....8.6.2.....1.7....3..7..9.2.......4..63127..",
"..........79.5.18.8.......7..73.68..45.7.8.96..35.27..7.......5.16.3.42..........",
".3.....8...9...5....75.92..7..1.5..8.2..9..3.9..4.2..1..42.71....2...8...7.....9.",
"2..17.6.3.5....1.......6.79....4.7.....8.1.....9.5....31.4.......5....6.9.6.37..2",
".......8.8..7.1.4..4..2..3.374...9......3......5...321.1..6..5..5.8.2..6.8.......",
".......85...21...996..8.1..5..8...16.........89...6..7..9.7..523...54...48.......",
"6.8.7.5.2.5.6.8.7...2...3..5...9...6.4.3.2.5.8...5...3..5...2...1.7.4.9.4.9.6.7.1",
".5..1..4.1.7...6.2...9.5...2.8.3.5.1.4..7..2.9.1.8.4.6...4.1...3.4...7.9.2..6..1.",
".53...79...97534..1.......2.9..8..1....9.7....8..3..7.5.......3..76412...61...94.",
"..6.8.3...49.7.25....4.5...6..317..4..7...8..1..826..9...7.2....75.4.19...3.9.6..",
"..5.8.7..7..2.4..532.....84.6.1.5.4...8...5...7.8.3.1.45.....916..5.8..7..3.1.6..",
"...9..8..128..64...7.8...6.8..43...75.......96...79..8.9...4.1...36..284..1..7...",
"....8....27.....54.95...81...98.64...2.4.3.6...69.51...17...62.46.....38....9....",
"...6.2...4...5...1.85.1.62..382.671...........194.735..26.4.53.9...2...7...8.9...",
"...9....2.5.1234...3....16.9.8.......7.....9.......2.5.91....5...7439.2.4....7...",
"38..........4..785..9.2.3...6..9....8..3.2..9....4..7...1.7.5..495..6..........92",
"...158.....2.6.8...3.....4..27.3.51...........46.8.79..5.....8...4.7.1.....325...",
".1.5..2..9....1.....2..8.3.5...3...7..8...5..6...8...4.4.1..7.....7....6..3..4.5.",
".8.....4....469...4.......7..59.46...7.6.8.3...85.21..9.......5...781....6.....1.",
"9.42....7.1..........7.65.....8...9..2.9.4.6..4...2.....16.7..........3.3....57.2",
"...7..8....6....31.4...2....24.7.....1..3..8.....6.29....8...7.86....5....2..6...",
"..1..7.9.59..8...1.3.....8......58...5..6..2...41......8.....3.1...2..79.2.7..4..",
".....3.17.15..9..8.6.......1....7.....9...2.....5....4.......2.5..6..34.34.2.....",
"3..2........1.7...7.6.3.5...7...9.8.9...2...4.1.8...5...9.4.3.1...7.2........8..6"
]
steps = 0
resultFound = False


import tracemalloc


lists_of_puzzles = [easy, medium, hard]

for puzzles in lists_of_puzzles:
    print("-----------------Difficulty Changed--------------------")
    for puzzle in puzzles:

        grid = []
        grid2D = []
        for c in puzzle:
            if c == '.' or c == '0':
                grid.append(0)
            else:
                grid.append(int(c))

        steps = 0
        grid2D = np.array(grid).reshape(9, 9)

        start = time.time()
        dlx = DancingLinks(grid2D)
        dlx.generate_links()

        tracemalloc.start()

        dlx = dlx.solve()

        current, peak = tracemalloc.get_traced_memory()
        tracemalloc.stop()

        end = time.time()
        execution_time = (end - start) * 1000
        print("execution time: ", execution_time)
        print("peak: ", peak)
        print("nodes: ", steps)
